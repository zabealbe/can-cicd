from enum import Enum
from struct import pack, unpack
from collections import namedtuple

{%- for enum in enums %}


class {{ enum["name"] }}(Enum):
    {%- for item_name, item_value in enum["items"] %}
    {{ item_name }} = {{ item_value }}
    {%- endfor %}

{%- endfor %}
{% for struct in structs -%}
{% set struct_name = struct["name"] %}
{% set endianness_prefix = "<" if endianness == "little" else ">" %}
# {{ struct_name }}
{{ struct_name }} = namedtuple("{{ struct_name }}", "{{ ' '.join(struct["items"].keys()) }}")
{{ struct_name }}_schema = "{{ endianness_prefix }}{{ format_string(struct["items"]) }}"

def serialize_{{ struct_name }}(struct: {{ struct_name }}) -> bytes:
    return pack({{ struct_name }}, *tuple(struct))

def deserialize_{{ struct_name }}(buffer: bytes) -> {{ struct_name }}:
    return {{ struct_name }}._make(unpack({{ struct_name }}_schema, buffer))
{% endfor -%}