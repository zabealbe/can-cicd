#ifndef {{ namespace.upper() }}_H
#define {{ namespace.upper() }}_H

#include <stdbool.h>
#include <stdint.h>
#include <assert.h>
#include <stdio.h>

/*
*   STDC Version check
*   check if STDC version is greater or equal than the minimum version required
*/
#define NAKED_STDC_MIN_VERSION 201112L
#if __STDC_VERSION__ < NAKED_STDC_MIN_VERSION
    #error "** STDC VERSION NOT SUPPORTED **"
#endif

/*
*   Endianness check
*   static check for supported endianness
*/
#ifndef __NAKED_ENDIAN_ORDER
    #define __NAKED_ENDIAN_ORDER 1094861636L // "ABCD"
#endif
#if !defined(__NAKED_LITTLE_ENDIAN) && !defined(__NAKED_BIG_ENDIAN) && !defined(__NAKED_PDP_ENDIAN)
    #if __NAKED_ENDIAN_ORDER==0x41424344UL 
        #define __NAKED_LITTLE_ENDIAN
    #elif __NAKED_ENDIAN_ORDER==0x44434241UL
        #define __NAKED_BIG_ENDIAN
    #elif __NAKED_ENDIAN_ORDER==0x42414443UL
        #define __NAKED_PDP_ENDIAN
    #else
        #error "** HARDWARE ENDIANNESS NOT SUPPORTED **"
    #endif
#endif

#ifndef __NAKED_{{ endianness }}
    #error "** HARDWARE ENDIANNESS NOT SUPPORTED **"
#endif

// assert float is 32bit and double is 64bit because not defined in the standard
static_assert(sizeof(float) == 4,"** THIS ARCHITECTURE DOESN'T MATCH THE EXPECTED SIZE FOR 'float' OF 4 BYTES **");
static_assert(sizeof(double) == 8, "** THIS ARCHITECTURE DOESN'T MATCH THE EXPECTED SIZE FOR 'double' OF 8 BYTES **");

/*
*   Packed macro
*   macro for packed structs on multiple compilers
*/
#if defined(__MINGW32__)
    #define __is_packed __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
    #define __is_packed __attribute__((__packed__)) // , __aligned__(1)))
#endif
    
{% for enum in enums %}
typedef enum __is_packed {
    {%- set prefix_enum = namespace + "_" + enum["name"] %}
    {%- for item in enum["items"] %}
    {{ prefix_enum }}_{{ item }},
    {%- endfor %}
} {{ prefix_enum }};
{% endfor -%}

{% for struct in structs %}
{% set prefix_struct = namespace + "_" + struct["name"] %}
/* {{ prefix_struct }} */
typedef struct __is_packed {
    {%- for item_name, item_type in struct["items"].items() %}
    {{ item_type.format(namespace=namespace) }} {{ item_name }};
    {%- endfor %}
} {{ prefix_struct }};
static_assert(sizeof({{ prefix_struct }}) == {{ struct["size"] }}, "struct size mismatch");
    
void serialize_{{ prefix_struct }}({{ prefix_struct }}* {{ struct["name"].lower() }}, uint8_t* buffer, size_t buf_len);
void deserialize_{{ prefix_struct }}(uint8_t* buffer, size_t buf_len, {{ prefix_struct }}* {{ struct["name"].lower() }});
{% endfor -%}

#endif